

import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.Song;
import com.ftn.sbnz.model.models.SkillLevel;
import com.ftn.sbnz.model.models.LearningGoal;
import com.ftn.sbnz.model.models.SongGenre;
import com.ftn.sbnz.model.models.CandidateSong;
import com.ftn.sbnz.model.models.LearningPlan;
import com.ftn.sbnz.model.models.SongScore;
import java.util.List;
import java.util.ArrayList;

query "songsForPlayerByEmail" (String email)
    $player : Player(email == email)
    $song : Song($player.songs.contains(id) == true)
end

rule "Update Song Counter - filter"
agenda-group "filter"
when
    $player : Player()
then
    $player.setSongCounter($player.getSongs().size());
    System.out.println("Player " + $player.getEmail() + " now has " + $player.getSongs().size() + " songs.");
end

rule "Update Song Counter - learning"
agenda-group "learning"
when
    $player : Player()
then
    $player.setSongCounter($player.getSongs().size());
    System.out.println("Player " + $player.getEmail() + " now has " + $player.getSongs().size() + " songs.");
end

//====================================RULES====================================

// === LEVEL FILTER ===
rule "Candidate Song by Level"
agenda-group "filter"
lock-on-active
salience 30
when
    $player : Player($level : level)
    $song : Song()
    eval($level == SkillLevel.NA || $level == $song.getLevel())
then
    insert(new CandidateSong($player, $song));
end

// === GENRE FILTER ===
rule "Remove Candidate Song if Genre Mismatch"
agenda-group "filter"
salience 20
when
    $candidate : CandidateSong($player : player, $song : song)
    eval($player.getGenre() != SongGenre.NA && $player.getGenre() != $song.getGenre())
then
    delete($candidate);
end

// === GOAL FILTER ===
rule "Filter Candidate Song by Goal"
agenda-group "filter"
salience 10
when
    $candidate : CandidateSong($player : player, $song : song)
    $playerChange : Player(email == $player.getEmail()) @Watch(songs, !*)
    eval($player.getGoal() == LearningGoal.NA || $song.getGoal() == $player.getGoal()) 
then
    modify($playerChange){addSong($song.getId())}; 
    System.out.println("Added song " + $song.getTitle() + " to player " + $player.getEmail());
    delete($candidate);
end


//acumululate points and sort songs

//acumululate hours and advance skill level

//====================================BC RULES====================================

query "canPlayerLearnSong" (String email, Long songId)
    $player : Player(email == email)
    $song : Song(id == songId)
    eval($player.getLevel().ordinal() >= $song.getLevel().ordinal())
end

rule "Chords Match Empty"
agenda-group "learning"
when
    $plan: LearningPlan($player : player, $song : song, $missing : chordsToLearn)
    eval($missing.isEmpty() || $missing.contains("*"))
then
    System.out.println("Player " + $plan.getPlayer().getEmail() + " can play song " + $plan.getSong().getTitle());
    modify($player){addSong($song.getId());}
end

rule "Chords Match"
agenda-group "learning"
when
    $plan: LearningPlan($player : player, $song : song, $missing : chordsToLearn)
    eval(!$missing.isEmpty() && !$missing.contains("*"))
then
    System.out.println("Player " + $plan.getPlayer().getEmail() + " cannot play song " + $plan.getSong().getTitle() + ". Missing chords: " + $missing);
    modify($player){addSong($song.getId());}
end



//-------------------------------------------------------------------------------------

rule "Points for matching difficulty"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getLevel().ordinal() >= $song.getLevel().ordinal())
then
    modify($score){ addPoints(7); }
end

rule "Points for matching genre"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getGenre() == $song.getGenre())
then
    modify($score){ addPoints(7); }
end

rule "Points for matching learning goal"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getGoal() == $song.getGoal())
then
    modify($score){ addPoints(3); }
end


rule "Points for matching liked song artist"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $player : player)
    $likedSong : Song($id : id, $artist : artist) 
        eval($player.getLikedSongs().contains($id))
    eval($song.getArtist().equals($artist))
then
    modify($score){ addPoints(6); }
end


rule "Points for popular songs 100"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $points : points)
    eval($song.getLikes() >= 100 && $song.getLikes() < 200)
then
    modify($score){ addPoints(1); }
end

rule "Points for popular songs 200"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $points : points)
    eval($song.getLikes() >= 200 && $song.getLikes() < 300)
then
    modify($score){ addPoints(2); }
end

rule "Points for popular songs 300"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $points : points)
    eval($song.getLikes() >= 300 && $song.getLikes() < 400)
then
    modify($score){ addPoints(3); }
end

rule "Points for popular songs 400"
agenda-group "recommend"
lock-on-active
when
    $score : SongScore($song : song, $points : points)
    eval($song.getLikes() >= 400)
then
    modify($score){ addPoints(4); }
end

rule "Add Top 5 Recommended Songs to Player"
agenda-group "recommend"
salience -10
when
    $player : Player()
    $scores : List() from collect (
        SongScore(song != null, player == $player)
    )
    eval($scores.size() > 0)
then
    List<SongScore> sortedScores = new ArrayList<>($scores);
    sortedScores.sort((a, b) -> Integer.compare(b.getPoints(), a.getPoints()));
    int limit = Math.min(5, sortedScores.size());
    for (int i = 0; i < limit; i++) {
        SongScore score = sortedScores.get(i);
        $player.addRecommendedSong(score.getSong().getId());
        System.out.println("Recommended song " + score.getSong().getTitle() + " for player " + $player.getEmail() + " with score " + score.getPoints());
    }
end

