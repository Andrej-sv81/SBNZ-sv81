

import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.Song;
import com.ftn.sbnz.model.models.SkillLevel;
import com.ftn.sbnz.model.models.LearningGoal;
import com.ftn.sbnz.model.models.SongGenre;
import com.ftn.sbnz.model.models.CandidateSong;
import com.ftn.sbnz.model.models.LearningPlan;
import com.ftn.sbnz.model.models.SongScore;

query "songsForPlayerByEmail" (String email)
    $player : Player(email == email)
    $song : Song($player.songs.contains(id) == true)
end

rule "Update Song Counter - filter"
agenda-group "filter"
when
    $player : Player()
then
    $player.setSongCounter($player.getSongs().size());
    System.out.println("Player " + $player.getEmail() + " now has " + $player.getSongs().size() + " songs.");
end

rule "Update Song Counter - learning"
agenda-group "learning"
when
    $player : Player()
then
    $player.setSongCounter($player.getSongs().size());
    System.out.println("Player " + $player.getEmail() + " now has " + $player.getSongs().size() + " songs.");
end

//====================================RULES====================================

// === LEVEL FILTER ===
rule "Candidate Song by Level"
agenda-group "filter"
lock-on-active
salience 30
when
    $player : Player($level : level)
    $song : Song()
    eval($level == SkillLevel.NA || $level == $song.getLevel())
then
    insert(new CandidateSong($player, $song));
end

// === GENRE FILTER ===
rule "Remove Candidate Song if Genre Mismatch"
agenda-group "filter"
salience 20
when
    $candidate : CandidateSong($player : player, $song : song)
    eval($player.getGenre() != SongGenre.NA && $player.getGenre() != $song.getGenre())
then
    delete($candidate);
end

// === GOAL FILTER ===
rule "Filter Candidate Song by Goal"
agenda-group "filter"
salience 10
when
    $candidate : CandidateSong($player : player, $song : song)
    $playerChange : Player(email == $player.getEmail()) @Watch(songs, !*)
    eval($player.getGoal() == LearningGoal.NA || $song.getGoal() == $player.getGoal()) 
then
    modify($playerChange){addSong($song.getId())}; 
    System.out.println("Added song " + $song.getTitle() + " to player " + $player.getEmail());
    delete($candidate);
end


//acumululate points and sort songs

//acumululate hours and advance skill level

//====================================BC RULES====================================

query "canPlayerLearnSong" (String email, Long songId)
    $player : Player(email == email)
    $song : Song(id == songId)
    eval($player.getLevel().ordinal() >= $song.getLevel().ordinal())
end

rule "Chords Match Empty"
agenda-group "learning"
when
    $plan: LearningPlan($player : player, $song : song, $missing : chordsToLearn)
    eval($missing.isEmpty() || $missing.contains("*"))
then
    System.out.println("Player " + $plan.getPlayer().getEmail() + " can play song " + $plan.getSong().getTitle());
    modify($player){addSong($song.getId());}
end

rule "Chords Match"
agenda-group "learning"
when
    $plan: LearningPlan($player : player, $song : song, $missing : chordsToLearn)
    eval(!$missing.isEmpty() && !$missing.contains("*"))
then
    System.out.println("Player " + $plan.getPlayer().getEmail() + " cannot play song " + $plan.getSong().getTitle() + ". Missing chords: " + $missing);
    modify($player){addSong($song.getId());}
end



//-------------------------------------------------------------------------------------

rule "Points for matching difficulty"
agenda-group "recommend"
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getLevel().ordinal() >= $song.getLevel().ordinal())
then
    modify($score){ addPoints(2); }
end

rule "Points for matching genre"
agenda-group "recommend"
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getGenre() == $song.getGenre())
then
    modify($score){ addPoints(2); }
end

rule "Points for matching learning goal"
agenda-group "recommend"
when
    $score : SongScore($song : song, $player : player, $points : points)
    eval($player.getGoal() == $song.getGoal())
then
    modify($score){ addPoints(1); }
end

// rule "Points for matching artist"
// agenda-group "recommend"
// when
//     $score : SongScore($song : song, $player : player, $points : points)

//     // collect liked songs from session facts that match any liked song ID
//     $likedSongs : java.util.List() from collect (
//         Song($artist : artist, $id : id) 
//         and eval($player.getLikedSongs().contains($id))
//     )

//     // only fire if any of the liked songs has the same artist as the SongScore song
//     eval($likedSongs.stream().anyMatch(s -> ((Song)s).getArtist().equals($song.getArtist())))
// then
//     modify($score){ addPoints(2); }
//     System.out.println("Added 2 points for artist match to song " + $song.getTitle());
// end

rule "Points for popular songs"
agenda-group "recommend"
when
    $score : SongScore($song : song, $points : points)
    eval($song.getLikes() >= 50) // example threshold
then
    modify($score){ addPoints(1); }
end



// rule "Pick top 5 recommended songs"
// agenda-group "recommend"
// when
//     $player : Player($rec : recommendedSongs)
//     $topSongs : List() from accumulate(
//         SongScore($song : song, $player == $player, $points : points),
//         collectList($song) // collect all songs
//     )
// then
//     // Sort by points in Java
//     $topSongs.sort((s1, s2) -> Integer.compare(
//         ((SongScore) kSession.getObjects(o -> ((SongScore)o).getSong().equals(s2))).getPoints(),
//         ((SongScore) kSession.getObjects(o -> ((SongScore)o).getSong().equals(s1))).getPoints()
//     ));
    
//     // Pick top 5
//     List<Song> top5 = $topSongs.stream().limit(5).collect(Collectors.toList());
//     $rec.clear();
//     top5.forEach(s -> $rec.add(s.getId()));

//     System.out.println("Recommended songs for " + $player.getEmail() + ": " + $rec);
// end

